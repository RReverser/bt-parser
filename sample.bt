//--------------------------------------------

switch (value) {
    case 1: a;
    case 2:
    case 3:
        b;
    case 4:
        c;
        break;
    default:
        d;
};//--------------------------------------------

union {
	local uint z = 0, z0;
	struct A {
		uint x, x0;
	} a;
	struct {
		uint y, y0;
	} b;
    float f1, f2;
} obj;

A a;

// Define the file
local uint tag;
LittleEndian(); 
while( !FEof() )
{
    // Read a tag
    tag = ReadUInt( FTell() );

    // Read data depending upon tag - should start with 'PK'.
    // Note that when duplicate variables are defined, they
    // are made into an array (see 'Using Templates and Structs'
    // in the help file).
    if( tag == 0x04034b50 )
    {
        SetBackColor( cLtGray );
        ZIPFILERECORD record;
    }
    else if( tag == 0x08074b50 )
    {
        SetBackColor( cLtGreen );
        ZIPDATADESCR dataDescr;
    }
    else if( tag == 0x02014b50 )
    {
        SetBackColor( cLtPurple );
        ZIPDIRENTRY dirEntry;
    }
    else if( tag == 0x05054b50 )
    {
        SetBackColor( cLtBlue );
        ZIPDIGITALSIG digitalSig;
    }
    else if( tag == 0x06054b50 )
    {
        SetBackColor( cLtYellow );
        ZIPENDLOCATOR endLocator;
    }
    else
    {
        Warning( "Unknown ZIP tag encountered.\nTemplate stopped.", true );
        local char c = 'a';
        return -1;
    }
}